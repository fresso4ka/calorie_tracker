import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
import sqlite3
from datetime import datetime

food_items = {
    "–Ø–±–ª–æ–∫–æ": 52, "–ë–∞–Ω–∞–Ω": 89, "–ê–ø–µ–ª—å—Å–∏–Ω": 47, "–ì—Ä—É—à–∞": 57, "–í–∏–Ω–æ–≥—Ä–∞–¥": 69,
    "–ö–ª—É–±–Ω–∏–∫–∞": 32, "–ê—Ä–±—É–∑": 30, "–î—ã–Ω—è": 34, "–ü–µ—Ä—Å–∏–∫": 39, "–ê–±—Ä–∏–∫–æ—Å": 48,
    "–°–ª–∏–≤–∞": 46, "–í–∏—à–Ω—è": 52, "–ß–µ—Ä–µ—à–Ω—è": 50, "–ö–∏–≤–∏": 61, "–ê–Ω–∞–Ω–∞—Å": 50,
    "–ú–∞–Ω–≥–æ": 60, "–ì—Ä–∞–Ω–∞—Ç": 83, "–•–ª–µ–± –±–µ–ª—ã–π": 265, "–•–ª–µ–± —á–µ—Ä–Ω—ã–π": 250,
    "–•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π": 240, "–ë–∞—Ç–æ–Ω": 260, "–ë–∞–≥–µ—Ç": 290, "–õ–∞–≤–∞—à": 275,
    "–ú–æ–ª–æ–∫–æ": 42, "–ö–µ—Ñ–∏—Ä": 41, "–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π": 60, "–°–º–µ—Ç–∞–Ω–∞": 206,
    "–¢–≤–æ—Ä–æ–≥": 121, "–°—ã—Ä": 402, "–ë—Ä—ã–Ω–∑–∞": 260, "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞": 280, "–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ": 717,
    "–Ø–π—Ü–æ": 155, "–Ø–∏—á–Ω—ã–π –±–µ–ª–æ–∫": 52, "–Ø–∏—á–Ω—ã–π –∂–µ–ª—Ç–æ–∫": 352,
    "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å": 77, "–ú–æ—Ä–∫–æ–≤—å": 41, "–ü–æ–º–∏–¥–æ—Ä": 18, "–û–≥—É—Ä–µ—Ü": 15,
    "–ö–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è": 28, "–ö–∞–ø—É—Å—Ç–∞ —Ü–≤–µ—Ç–Ω–∞—è": 30, "–ë—Ä–æ–∫–∫–æ–ª–∏": 34,
    "–õ—É–∫": 40, "–ß–µ—Å–Ω–æ–∫": 149, "–°–≤–µ–∫–ª–∞": 43, "–¢—ã–∫–≤–∞": 22, "–ö–∞–±–∞—á–æ–∫": 24,
    "–ë–∞–∫–ª–∞–∂–∞–Ω": 24, "–ü–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π": 27, "–®–ø–∏–Ω–∞—Ç": 23, "–°–µ–ª—å–¥–µ—Ä–µ–π": 12,
    "–ö—É—Ä–∏—Ü–∞": 239, "–ò–Ω–¥–µ–π–∫–∞": 190, "–ì–æ–≤—è–¥–∏–Ω–∞": 250, "–°–≤–∏–Ω–∏–Ω–∞": 242,
    "–ë–∞—Ä–∞–Ω–∏–Ω–∞": 209, "–£—Ç–∫–∞": 308, "–ì—É—Å—å": 364, "–ö—Ä–æ–ª–∏–∫": 183,
    "–†–∏—Å": 130, "–ì—Ä–µ—á–∫–∞": 132, "–û–≤—Å—è–Ω–∫–∞": 88, "–ü—à–µ–Ω–æ": 135,
    "–ú–∞–∫–∞—Ä–æ–Ω—ã": 131, "–°–ø–∞–≥–µ—Ç—Ç–∏": 158, "–õ–∞–ø—à–∞": 138
}

#–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–¥
class CalorieDatabase:
    def __init__(self):
        self.connection = sqlite3.connect('calorie_tracker.db', check_same_thread=False)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        #–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS food_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                food_name TEXT NOT NULL,
                weight_grams REAL NOT NULL,
                food_calories REAL NOT NULL,
                total_calories REAL NOT NULL
            )
        ''')
        self.connection.commit()

    def add_food_record(self, food_name, weight_grams, food_calories, total_calories):
        #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.cursor.execute(
            "INSERT INTO food_history (date, food_name, weight_grams, food_calories, total_calories) VALUES (?, ?, ?, ?, ?)",
            (current_time, food_name, weight_grams, food_calories, total_calories)
        )
        self.connection.commit()

    def get_today_food(self):
        #–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_date = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute(
            "SELECT food_name, weight_grams, food_calories FROM food_history WHERE date LIKE ? ORDER BY id DESC LIMIT 10",
            (f"{today_date}%",)
        )
        return self.cursor.fetchall()

    def get_today_total_calories(self):
        #–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_date = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute(
            "SELECT SUM(food_calories) FROM food_history WHERE date LIKE ?",
            (f"{today_date}%",)
        )
        result = self.cursor.fetchone()
        return result[0] if result[0] else 0

    def clear_today_food(self):
        #–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_date = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute(
            "DELETE FROM food_history WHERE date LIKE ?",
            (f"{today_date}%",)
        )
        self.connection.commit()
        return self.cursor.rowcount

calorie_history = []
food_history = []
current_calories = 0
daily_limit = 2000  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–æ—Ä–º–∞

#–°–æ–∑–¥–∞–Ω–∏–µ –±–¥
db = CalorieDatabase()

#–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
def calculate_daily_calories():
    global daily_limit, current_calories
    try:
        user_weight = float(weight_input.get())
        user_height = float(height_input.get())
        user_age = int(age_input.get())
        user_gender = gender_input.get()
        user_goal = goal_input.get()
        user_activity = activity_input.get()

        #–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
        if user_gender == "–ú—É–∂—á–∏–Ω–∞":
            base_metabolism = 88.36 + (13.4 * user_weight) + (4.8 * user_height) - (5.7 * user_age)
        else:
            base_metabolism = 447.6 + (9.2 * user_weight) + (3.1 * user_height) - (4.3 * user_age)

        #–£—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_multipliers = {
            "–°–∏–¥—è—á–∏–π (–æ—Ñ–∏—Å)": 1.2,
            "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.375,
            "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.55,
            "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.725,
            "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.9
        }
        daily_limit = base_metabolism * activity_multipliers.get(user_activity, 1.55)

        #–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
        if user_goal == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
            daily_limit -= 500
        elif user_goal == "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":
            daily_limit += 500

        #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        daily_label.config(text=f"–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_limit:.0f} –∫–∫–∞–ª")
        current_calories = db.get_today_total_calories()
        calorie_history.clear()
        food_history.clear()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_food = db.get_today_food()
        for food_name, weight_grams, food_calories in today_food:
            food_history.append(f"{food_name} ({weight_grams} –≥) = {food_calories:.1f} –∫–∫–∞–ª")

        update_interface()

    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!")

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
def add_food_item():
    global current_calories
    selected_food = food_input.get()
    food_weight = weight_food_input.get()

    if selected_food not in food_items:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!")
        return

    try:
        food_weight = float(food_weight)
    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö!")
        return

    #–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
    calories_in_food = food_items[selected_food] * food_weight / 100
    current_calories += calories_in_food

    food_history.append(f"{selected_food} ({food_weight} –≥) = {calories_in_food:.1f} –∫–∫–∞–ª")
    calorie_history.append(current_calories)

    #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥
    db.add_food_record(selected_food, food_weight, calories_in_food, current_calories)

    update_interface()

#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def update_interface():
    calories_left = daily_limit - current_calories
    result_label.config(text=f"–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {current_calories:.1f} –∫–∫–∞–ª\n"
                             f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {calories_left:.1f} –∫–∫–∞–ª")
    history_label.config(text="\n".join(food_history[-10:]))

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    today_total = db.get_today_total_calories()
    stats_label.config(text=f"üìä –°–µ–≥–æ–¥–Ω—è —Å—ä–µ–¥–µ–Ω–æ: {today_total:.1f} –∫–∫–∞–ª")

    if current_calories > daily_limit:
        advice_label.config(text="‚ö† –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!", fg="red")
    else:
        advice_label.config(text="–ù–æ—Ä–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ", fg="green")

#–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
def show_calorie_chart():
    if not calorie_history:
        messagebox.showinfo("–ì—Ä–∞—Ñ–∏–∫", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã!")
        return
    plt.figure(figsize=(8, 4))
    plt.plot(range(1, len(calorie_history) + 1), calorie_history, marker="o", color="blue")
    plt.axhline(daily_limit, color="red", linestyle="--", label="–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞")
    plt.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏")
    plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    plt.ylabel("–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)")
    plt.legend()
    plt.grid(True)
    plt.show()

#–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–∏—Ç–∞–Ω–∏—è
def show_food_history():
    history = db.get_today_food()
    if not history:
        messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è", "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    history_text = "üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, (food_name, weight_grams, food_calories) in enumerate(history, 1):
        history_text += f"{i}. {food_name} - {weight_grams}–≥ = {food_calories:.1f} –∫–∫–∞–ª\n"

    messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è", history_text)

#–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
def clear_food_history():
    answer = messagebox.askyesno(
        "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏",
        "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?",
        icon='question'
    )

    if answer:
        deleted_count = db.clear_today_food()
        messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏", f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")

        global current_calories
        current_calories = 0
        calorie_history.clear()
        food_history.clear()
        update_interface()

#–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app = tk.Tk()
app.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π")
app.geometry("500x600")

#–ó–∞–≥–æ–ª–æ–≤–æ–∫
title = tk.Label(app, text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π", font=("Arial", 14, "bold"))
title.pack(pady=10)

#–ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞, –≤–µ—Å–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞
input_frame = tk.Frame(app)
input_frame.pack(pady=5)
tk.Label(input_frame, text="–í–µ—Å (–∫–≥)").grid(row=0, column=0)
tk.Label(input_frame, text="–†–æ—Å—Ç (—Å–º)").grid(row=0, column=1)
tk.Label(input_frame, text="–í–æ–∑—Ä–∞—Å—Ç").grid(row=0, column=2)

weight_input = tk.StringVar()
weight_entry = tk.Entry(input_frame, textvariable=weight_input, width=5)
weight_entry.grid(row=1, column=0)

height_input = tk.StringVar()
height_entry = tk.Entry(input_frame, textvariable=height_input, width=5)
height_entry.grid(row=1, column=1)

age_input = tk.StringVar()
age_entry = tk.Entry(input_frame, textvariable=age_input, width=5)
age_entry.grid(row=1, column=2)

#–í—ã–±–æ—Ä –ø–æ–ª–∞, —Ü–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
choice_frame = tk.Frame(app)
choice_frame.pack(pady=5)

gender_input = tk.StringVar(value="–ú—É–∂—á–∏–Ω–∞")
gender_combo = ttk.Combobox(choice_frame, textvariable=gender_input, values=["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"], width=10)
gender_combo.grid(row=0, column=0, padx=5)

goal_input = tk.StringVar(value="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")
goal_combo = ttk.Combobox(choice_frame, textvariable=goal_input,
                          values=["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", "–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"], width=15)
goal_combo.grid(row=0, column=1, padx=5)

activity_input = tk.StringVar(value="–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
activity_combo = ttk.Combobox(choice_frame, textvariable=activity_input, values=[
    "–°–∏–¥—è—á–∏–π (–æ—Ñ–∏—Å)", "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
                              width=18)
activity_combo.grid(row=0, column=2, padx=5)

calc_button = tk.Button(choice_frame, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É", command=calculate_daily_calories)
calc_button.grid(row=0, column=3, padx=5)

#–ú–µ—Ç–∫–∞ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
daily_label = tk.Label(app, text=f"–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_limit:.0f} –∫–∫–∞–ª", font=("Arial", 12))
daily_label.pack(pady=5)

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats_label = tk.Label(app, text="üìä –°–µ–≥–æ–¥–Ω—è —Å—ä–µ–¥–µ–Ω–æ: 0 –∫–∫–∞–ª", font=("Arial", 10), fg="blue")
stats_label.pack(pady=2)

#–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
food_input = tk.StringVar()
food_combo = ttk.Combobox(app, textvariable=food_input, width=30)
food_combo['values'] = sorted(list(food_items.keys()))
food_combo.pack(pady=5)
food_combo.set("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç")

weight_food_input = tk.StringVar()
weight_food_entry = tk.Entry(app, textvariable=weight_food_input, width=30)
weight_food_entry.pack(pady=5)
weight_food_entry.insert(0, "–í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö")

add_food_button = tk.Button(app, text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", command=add_food_item)
add_food_button.pack(pady=10)

#–ö–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
history_buttons_frame = tk.Frame(app)
history_buttons_frame.pack(pady=5)

show_history_button = tk.Button(history_buttons_frame, text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=show_food_history)
show_history_button.grid(row=0, column=0, padx=5)

clear_history_button = tk.Button(history_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=clear_food_history,
                                 bg="#ffcccc")
clear_history_button.grid(row=0, column=1, padx=5)

#–†–µ–∑—É–ª—å—Ç–∞—Ç—ã
result_label = tk.Label(app, text="–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: 0 –∫–∫–∞–ª", font=("Arial", 12))
result_label.pack(pady=5)

history_label = tk.Label(app, text="", font=("Arial", 10), justify="left")
history_label.pack(pady=5)

advice_label = tk.Label(app, text="", font=("Arial", 12, "italic"))
advice_label.pack(pady=5)

chart_button = tk.Button(app, text="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π", command=show_calorie_chart)
chart_button.pack(pady=10)

app.mainloop()