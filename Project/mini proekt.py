import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
import sqlite3
from datetime import datetime

products = {
    "–Ø–±–ª–æ–∫–æ": 52, "–ë–∞–Ω–∞–Ω": 89, "–ê–ø–µ–ª—å—Å–∏–Ω": 47, "–ì—Ä—É—à–∞": 57, "–í–∏–Ω–æ–≥—Ä–∞–¥": 69,
    "–ö–ª—É–±–Ω–∏–∫–∞": 32, "–ê—Ä–±—É–∑": 30, "–î—ã–Ω—è": 34, "–ü–µ—Ä—Å–∏–∫": 39, "–ê–±—Ä–∏–∫–æ—Å": 48,
    "–°–ª–∏–≤–∞": 46, "–í–∏—à–Ω—è": 52, "–ß–µ—Ä–µ—à–Ω—è": 50, "–ö–∏–≤–∏": 61, "–ê–Ω–∞–Ω–∞—Å": 50,
    "–ú–∞–Ω–≥–æ": 60, "–ì—Ä–∞–Ω–∞—Ç": 83, "–•–ª–µ–± –±–µ–ª—ã–π": 265, "–•–ª–µ–± —á–µ—Ä–Ω—ã–π": 250,
    "–•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π": 240, "–ë–∞—Ç–æ–Ω": 260, "–ë–∞–≥–µ—Ç": 290, "–õ–∞–≤–∞—à": 275,
    "–ú–æ–ª–æ–∫–æ": 42, "–ö–µ—Ñ–∏—Ä": 41, "–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π": 60, "–°–º–µ—Ç–∞–Ω–∞": 206,
    "–¢–≤–æ—Ä–æ–≥": 121, "–°—ã—Ä": 402, "–ë—Ä—ã–Ω–∑–∞": 260, "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞": 280, "–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ": 717,
    "–Ø–π—Ü–æ": 155, "–Ø–∏—á–Ω—ã–π –±–µ–ª–æ–∫": 52, "–Ø–∏—á–Ω—ã–π –∂–µ–ª—Ç–æ–∫": 352,
    "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å": 77, "–ú–æ—Ä–∫–æ–≤—å": 41, "–ü–æ–º–∏–¥–æ—Ä": 18, "–û–≥—É—Ä–µ—Ü": 15,
    "–ö–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è": 28, "–ö–∞–ø—É—Å—Ç–∞ —Ü–≤–µ—Ç–Ω–∞—è": 30, "–ë—Ä–æ–∫–∫–æ–ª–∏": 34,
    "–õ—É–∫": 40, "–ß–µ—Å–Ω–æ–∫": 149, "–°–≤–µ–∫–ª–∞": 43, "–¢—ã–∫–≤–∞": 22, "–ö–∞–±–∞—á–æ–∫": 24,
    "–ë–∞–∫–ª–∞–∂–∞–Ω": 24, "–ü–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π": 27, "–®–ø–∏–Ω–∞—Ç": 23, "–°–µ–ª—å–¥–µ—Ä–µ–π": 12,
    "–ö—É—Ä–∏—Ü–∞": 239, "–ò–Ω–¥–µ–π–∫–∞": 190, "–ì–æ–≤—è–¥–∏–Ω–∞": 250, "–°–≤–∏–Ω–∏–Ω–∞": 242,
    "–ë–∞—Ä–∞–Ω–∏–Ω–∞": 209, "–£—Ç–∫–∞": 308, "–ì—É—Å—å": 364, "–ö—Ä–æ–ª–∏–∫": 183,
    "–†–∏—Å": 130, "–ì—Ä–µ—á–∫–∞": 132, "–û–≤—Å—è–Ω–∫–∞": 88, "–ü—à–µ–Ω–æ": 135,
    "–ú–∞–∫–∞—Ä–æ–Ω—ã": 131, "–°–ø–∞–≥–µ—Ç—Ç–∏": 158, "–õ–∞–ø—à–∞": 138
}

#–ë–î
class DatabaseManager:
    def __init__(self):
        self.conn = sqlite3.connect('calorie_tracker.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS daily_records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                product TEXT NOT NULL,
                grams REAL NOT NULL,
                calories REAL NOT NULL,
                total_calories REAL NOT NULL
            )
        ''')
        self.conn.commit()

    def save_record(self, product, grams, calories, total_calories):
        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.cursor.execute(
            "INSERT INTO daily_records (date, product, grams, calories, total_calories) VALUES (?, ?, ?, ?, ?)",
            (date, product, grams, calories, total_calories)
        )
        self.conn.commit()

    def get_today_history(self):
        today = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute(
            "SELECT product, grams, calories FROM daily_records WHERE date LIKE ? ORDER BY id DESC LIMIT 10",
            (f"{today}%",)
        )
        return self.cursor.fetchall()

    def get_total_today_calories(self):
        today = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute(
            "SELECT SUM(calories) FROM daily_records WHERE date LIKE ?",
            (f"{today}%",)
        )
        result = self.cursor.fetchone()
        return result[0] if result[0] else 0

    def clear_today_history(self):
        today = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute(
            "DELETE FROM daily_records WHERE date LIKE ?",
            (f"{today}%",)
        )
        self.conn.commit()
        return self.cursor.rowcount  #–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

#–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞
calories_list = []
products_list = []
total_calories = 0
daily_calories = 2000  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–¥
db = DatabaseManager()

#–†–∞—Å—á–µ—Ç BMR –∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def calculate_bmr():
    global daily_calories, total_calories
    try:
        weight = float(weight_var.get())
        height = float(height_var.get())
        age = int(age_var.get())
        sex = sex_var.get()
        goal = goal_var.get()
        activity_level = activity_var.get()

        if sex == "–ú—É–∂—á–∏–Ω–∞":
            bmr = 88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)
        else:
            bmr = 447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)

        activity_factors = {
            "–°–∏–¥—è—á–∏–π (–æ—Ñ–∏—Å)": 1.2,
            "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.375,
            "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.55,
            "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.725,
            "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.9
        }
        daily_calories = bmr * activity_factors.get(activity_level, 1.55)

        if goal == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
            daily_calories -= 500
        elif goal == "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":
            daily_calories += 500

        daily_label.config(text=f"–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories:.0f} –∫–∫–∞–ª")
        total_calories = db.get_total_today_calories()  #–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–¥
        calories_list.clear()
        products_list.clear()

        #–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_history = db.get_today_history()
        for product, grams, calories in today_history:
            products_list.append(f"{product} ({grams} –≥) = {calories:.1f} –∫–∫–∞–ª")

        update_display()

    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
def add_product():
    global total_calories
    prod_name = product_var.get()
    grams = grams_var.get()

    if prod_name not in products:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!")
        return

    try:
        grams = float(grams)
    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º!")
        return

    cal = products[prod_name] * grams / 100
    total_calories += cal

    products_list.append(f"{prod_name} ({grams} –≥) = {cal:.1f} –∫–∫–∞–ª")
    calories_list.append(total_calories)

    #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥
    db.save_record(prod_name, grams, cal, total_calories)

    update_display()

def update_display():
    result_label.config(text=f"–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {total_calories:.1f} –∫–∫–∞–ª\n"
                             f"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ –Ω–æ—Ä–º—ã: {daily_calories - total_calories:.1f} –∫–∫–∞–ª")
    tracker_label.config(text="\n".join(products_list[-10:]))

    #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–¥
    today_total = db.get_total_today_calories()
    db_stats_label.config(text=f"üìä –°–µ–≥–æ–¥–Ω—è —Å—ä–µ–¥–µ–Ω–æ: {today_total:.1f} –∫–∫–∞–ª")

    if total_calories > daily_calories:
        advice_label.config(text="‚ö† –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!", fg="red")
    else:
        advice_label.config(text="–ù–æ—Ä–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ", fg="green")

#–ì—Ä–∞—Ñ–∏–∫
def show_graph():
    if not calories_list:
        messagebox.showinfo("–ì—Ä–∞—Ñ–∏–∫", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç!")
        return
    plt.figure(figsize=(8, 4))
    plt.plot(range(1, len(calories_list) + 1), calories_list, marker="o", color="blue")
    plt.axhline(daily_calories, color="red", linestyle="--", label="–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π")
    plt.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏")
    plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    plt.ylabel("–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–∫–∫–∞–ª)")
    plt.legend()
    plt.grid(True)
    plt.show()

#–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–¥
def show_db_history():
    history = db.get_today_history()
    if not history:
        messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è", "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    history_text = "üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, (product, grams, calories) in enumerate(history, 1):
        history_text += f"{i}. {product} - {grams}–≥ = {calories:.1f} –∫–∫–∞–ª\n"

    messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è", history_text)

def clear_history():
    result = messagebox.askyesno(
        "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏",
        "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è?",
        icon='question'
    )

    if result:
        deleted_count = db.clear_today_history()
        messagebox.showinfo("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏", f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {deleted_count}")

        global total_calories
        total_calories = 0
        calories_list.clear()
        products_list.clear()
        update_display()

#–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
root = tk.Tk()
root.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
root.geometry("500x600")

title_label = tk.Label(root, text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π", font=("Arial", 14, "bold"))
title_label.pack(pady=10)

#–†–æ—Å—Ç, –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç
frame1 = tk.Frame(root)
frame1.pack(pady=5)
tk.Label(frame1, text="–í–µ—Å (–∫–≥)").grid(row=0, column=0)
tk.Label(frame1, text="–†–æ—Å—Ç (—Å–º)").grid(row=0, column=1)
tk.Label(frame1, text="–í–æ–∑—Ä–∞—Å—Ç").grid(row=0, column=2)

weight_var = tk.StringVar()
weight_entry = tk.Entry(frame1, textvariable=weight_var, width=5)
weight_entry.grid(row=1, column=0)

height_var = tk.StringVar()
height_entry = tk.Entry(frame1, textvariable=height_var, width=5)
height_entry.grid(row=1, column=1)

age_var = tk.StringVar()
age_entry = tk.Entry(frame1, textvariable=age_var, width=5)
age_entry.grid(row=1, column=2)

#–ü–æ–ª, —Ü–µ–ª—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
frame2 = tk.Frame(root)
frame2.pack(pady=5)

sex_var = tk.StringVar(value="–ú—É–∂—á–∏–Ω–∞")
ttk.Combobox(frame2, textvariable=sex_var, values=["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"], width=10).grid(row=0, column=0, padx=5)

goal_var = tk.StringVar(value="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")
ttk.Combobox(frame2, textvariable=goal_var, values=["–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", "–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"], width=15).grid(
    row=0, column=1, padx=5)

activity_var = tk.StringVar(value="–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
ttk.Combobox(frame2, textvariable=activity_var, values=[
    "–°–∏–¥—è—á–∏–π (–æ—Ñ–∏—Å)", "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
             width=18).grid(row=0, column=2, padx=5)

calc_button = tk.Button(frame2, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É", command=calculate_bmr)
calc_button.grid(row=0, column=3, padx=5)

daily_label = tk.Label(root, text=f"–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories:.0f} –∫–∫–∞–ª", font=("Arial", 12))
daily_label.pack(pady=5)

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–¥
db_stats_label = tk.Label(root, text="üìä –°–µ–≥–æ–¥–Ω—è —Å—ä–µ–¥–µ–Ω–æ: 0 –∫–∫–∞–ª", font=("Arial", 10), fg="blue")
db_stats_label.pack(pady=2)

#–ü—Ä–æ–¥—É–∫—Ç—ã
product_var = tk.StringVar()
product_menu = ttk.Combobox(root, textvariable=product_var, width=30)
product_menu['values'] = sorted(list(products.keys()))
product_menu.pack(pady=5)
product_menu.set("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç")

grams_var = tk.StringVar()
grams_entry = tk.Entry(root, textvariable=grams_var, width=30)
grams_entry.pack(pady=5)
grams_entry.insert(0, "–ì—Ä–∞–º–º—ã")

add_button = tk.Button(root, text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", command=add_product)
add_button.pack(pady=10)

#–§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
history_frame = tk.Frame(root)
history_frame.pack(pady=5)

#–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
history_button = tk.Button(history_frame, text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=show_db_history)
history_button.grid(row=0, column=0, padx=5)

#–ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
clear_button = tk.Button(history_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=clear_history, bg="#ffcccc")
clear_button.grid(row=0, column=1, padx=5)

result_label = tk.Label(root, text="–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: 0 –∫–∫–∞–ª", font=("Arial", 12))
result_label.pack(pady=5)

tracker_label = tk.Label(root, text="", font=("Arial", 10), justify="left")
tracker_label.pack(pady=5)

advice_label = tk.Label(root, text="", font=("Arial", 12, "italic"))
advice_label.pack(pady=5)

graph_button = tk.Button(root, text="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π", command=show_graph)
graph_button.pack(pady=10)

root.mainloop()